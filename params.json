{
  "name": "Echo",
  "tagline": "FastHTTP & net/http dual-engine web framework. Echo v2 enhanced version.",
  "body": "# Echo\r\n[![Build Status](https://travis-ci.org/webx-top/echo.svg?branch=master)](https://travis-ci.org/webx-top/echo) [![Go Report Card](https://goreportcard.com/badge/github.com/webx-top/echo)](https://goreportcard.com/report/github.com/webx-top/echo)\r\n#### Echo is a fast and unfancy web framework for Go (Golang). Up to 10x faster than the rest.\r\n\r\n## Features\r\n\r\n- Optimized HTTP router which smartly prioritize routes.\r\n- Build robust and scalable RESTful APIs.\r\n- Run with standard HTTP server or FastHTTP server.\r\n- Group APIs.\r\n- Extensible middleware framework.\r\n- Define middleware at root, group or route level.\r\n- Handy functions to send variety of HTTP responses.\r\n- Centralized HTTP error handling.\r\n- Template rendering with any template engine.\r\n- Define your format for the logger.\r\n- Highly customizable.\r\n\r\n## Quick Start\r\n\r\n### Installation\r\n\r\n```sh\r\n$ go get github.com/webx-top/echo\r\n```\r\n\r\n### Hello, World!\r\n\r\nCreate `server.go`\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"net/http\"\r\n\t\"github.com/webx-top/echo\"\r\n\t\"github.com/webx-top/echo/engine/standard\"\r\n)\r\n\r\nfunc main() {\r\n\te := echo.New()\r\n\te.Get(\"/\", func(c echo.Context) error {\r\n\t\treturn c.String(\"Hello, World!\", http.StatusOK)\r\n\t})\r\n\te.Run(standard.New(\":1323\"))\r\n}\r\n```\r\n\r\nStart server\r\n\r\n```sh\r\n$ go run server.go\r\n```\r\n\r\nBrowse to [http://localhost:1323](http://localhost:1323) and you should see\r\nHello, World! on the page.\r\n\r\n### Routing\r\n\r\n```go\r\ne.Post(\"/users\", saveUser)\r\ne.Get(\"/users/:id\", getUser)\r\ne.Put(\"/users/:id\", updateUser)\r\ne.Delete(\"/users/:id\", deleteUser)\r\n```\r\n\r\n### Path Parameters\r\n\r\n```go\r\nfunc getUser(c echo.Context) error {\r\n\t// User ID from path `users/:id`\r\n\tid := c.Param(\"id\")\r\n}\r\n```\r\n\r\n### Query Parameters\r\n\r\n`/show?team=x-men&member=wolverine`\r\n\r\n```go\r\nfunc show(c echo.Context) error {\r\n\t// Get team and member from the query string\r\n\tteam := c.Query(\"team\")\r\n\tmember := c.Query(\"member\")\r\n}\r\n```\r\n\r\n### Form `application/x-www-form-urlencoded`\r\n\r\n`POST` `/save`\r\n\r\nname | value\r\n:--- | :---\r\nname | Joe Smith\r\nemail | joe@labstack.com\r\n\r\n\r\n```go\r\nfunc save(c echo.Context) error {\r\n\t// Get name and email\r\n\tname := c.Form(\"name\")\r\n\temail := c.Form(\"email\")\r\n}\r\n```\r\n\r\n### Form `multipart/form-data`\r\n\r\n`POST` `/save`\r\n\r\nname | value\r\n:--- | :---\r\nname | Joe Smith\r\nemail | joe@labstack.com\r\navatar | avatar\r\n\r\n```go\r\nfunc save(c echo.Context) error {\r\n\t// Get name and email\r\n\tname := c.Form(\"name\")\r\n\temail := c.Form(\"email\")\r\n\r\n\t//------------\r\n\t// Get avatar\r\n\t//------------\r\n\r\n\tsrc, fileHeader, err := c.FormFile(\"avatar\")\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer src.Close()\r\n\r\n\t// Destination\r\n\tfile, err := os.Create(fileHeader.Filename)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer file.Close()\r\n\r\n\t// Copy\r\n\tif _, err = io.Copy(file, src); err != nil {\r\n\t\treturn err\r\n\t}\r\n}\r\n```\r\n\r\n### Handling Request\r\n\r\n- Bind `JSON` or `XML` payload into Go struct based on `Content-Type` request header.\r\n- Render response as `JSON` or `XML` with status code.\r\n\r\n```go\r\ntype User struct {\r\n\tName  string `json:\"name\" xml:\"name\"`\r\n\tEmail string `json:\"email\" xml:\"email\"`\r\n}\r\n\r\ne.Post(\"/users\", func(c echo.Context) error {\r\n\tu := new(User)\r\n\tif err := c.MustBind(u); err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn c.JSON(u, http.StatusCreated)\r\n\t// or\r\n\t// return c.XML(u, http.StatusCreated)\r\n})\r\n```\r\n\r\n### Static Content\r\n\r\nServer any file from static directory for path `/static/*`.\r\n\r\n```go\r\ne.Use(mw.Static(&mw.StaticOptions{\r\n\tRoot:\"static\", //存放静态文件的物理路径\r\n\tPath:\"/static/\", //网址访问静态文件的路径\r\n\tBrowse:true, //是否在首页显示文件列表\r\n}))\r\n```\r\n\r\n### Middleware\r\n\r\n```go\r\n// Root level middleware\r\ne.Use(middleware.Log())\r\ne.Use(middleware.Recover())\r\n\r\n// Group level middleware\r\ng := e.Group(\"/admin\")\r\ng.Use(middleware.BasicAuth(func(username, password string) bool {\r\n\tif username == \"joe\" && password == \"secret\" {\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}))\r\n\r\n// Route level middleware\r\ntrack := func(next echo.HandlerFunc) echo.HandlerFunc {\r\n\treturn func(c echo.Context) error {\r\n\t\tprintln(\"request to /users\")\r\n\t\treturn next.Handle(c)\r\n\t}\r\n}\r\ne.Get(\"/users\", func(c echo.Context) error {\r\n\treturn c.String(\"/users\", http.StatusOK)\r\n}, track)\r\n```\r\n\r\n### Cookie\r\n```go\r\ne.Get(\"/setcookie\", func(c echo.Context) error {\r\n\tc.SetCookie(\"uid\",\"1\")\r\n\treturn c.String(\"/setcookie: uid=\"+c.GetCookie(\"uid\"), http.StatusOK)\r\n})\r\n```\r\n\r\n### Session\r\n```go\r\n...\r\nimport (\r\n\t...\r\n\t\"github.com/webx-top/echo/middleware/session\"\r\n\t//boltStore \"github.com/webx-top/echo/middleware/session/engine/bolt\"\r\n\tcookieStore \"github.com/webx-top/echo/middleware/session/engine/cookie\"\r\n)\r\n...\r\nsessionOptions := &echo.SessionOptions{\r\n\tEngine: `cookie`,\r\n\tName:   `SESSIONID`,\r\n\tCookieOptions: &echo.CookieOptions{\r\n\t\tPath:     `/`,\r\n\t\tDomain:   ``,\r\n\t\tMaxAge:   0,\r\n\t\tSecure:   false,\r\n\t\tHttpOnly: true,\r\n\t},\r\n}\r\n\r\ncookieStore.RegWithOptions(&cookieStore.CookieOptions{\r\n\tKeyPairs: [][]byte{\r\n\t\t[]byte(`123456789012345678901234567890ab`),\r\n\t},\r\n\tSessionOptions: sessionOptions,\r\n})\r\n\r\ne.Use(session.Middleware(sessionOptions))\r\n\r\ne.Get(\"/session\", func(c echo.Context) error {\r\n\tc.Session().Set(\"uid\",1).Save()\r\n\treturn c.String(fmt.Sprintf(\"/session: uid=%v\",c.Session().Get(\"uid\")))\r\n})\r\n```\r\n\r\n### Websocket\r\n```go\r\n...\r\nimport (\r\n\t...\r\n\t\"github.com/admpub/websocket\"\r\n\t\"github.com/webx-top/echo\"\r\n\tws \"github.com/webx-top/echo/handler/websocket\"\r\n)\r\n...\r\n\r\ne.HandlerWrapper = ws.HanderWrapper\r\n\r\ne.Get(\"/websocket\", func(c *websocket.Conn, ctx echo.Context) error {\r\n\t//push(writer)\r\n\tgo func() {\r\n\t\tvar counter int\r\n\t\tfor {\r\n\t\t\tif counter >= 10 { //测试只推10条\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\ttime.Sleep(5 * time.Second)\r\n\t\t\tmessage := time.Now().String()\r\n\t\t\tctx.Logger().Info(`Push message: `, message)\r\n\t\t\tif err := c.WriteMessage(websocket.TextMessage, []byte(message)); err != nil {\r\n\t\t\t\tctx.Logger().Error(`Push error: `, err.Error())\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tcounter++\r\n\t\t}\r\n\t}()\r\n\r\n\t//echo\r\n\tws.DefaultExecuter(c, ctx)\r\n\treturn nil\r\n})\r\n```\r\n[More...](https://github.com/webx-top/echo/blob/master/handler/websocket/example/main.go)\r\n\r\n### Sockjs\r\n```go\r\n...\r\nimport (\r\n\t...\r\n\t\"github.com/webx-top/echo\"\r\n\t\"github.com/admpub/sockjs-go/sockjs\"\r\n\tws \"github.com/webx-top/echo/handler/sockjs\"\r\n)\r\n...\r\n\r\noptions := ws.Options{\r\n\tHandle: func(c sockjs.Session) error {\r\n\t\t//push(writer)\r\n\t\tgo func() {\r\n\t\t\tvar counter int\r\n\t\t\tfor {\r\n\t\t\t\tif counter >= 10 { //测试只推10条\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\ttime.Sleep(5 * time.Second)\r\n\t\t\t\tmessage := time.Now().String()\r\n\t\t\t\tlog.Info(`Push message: `, message)\r\n\t\t\t\tif err := c.Send(message); err != nil {\r\n\t\t\t\t\tlog.Error(`Push error: `, err.Error())\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tcounter++\r\n\t\t\t}\r\n\t\t}()\r\n\r\n\t\t//echo\r\n\t\tws.DefaultExecuter(c)\r\n\t\treturn nil\r\n\t},\r\n\tOptions: sockjs.DefaultOptions,\r\n\tPrefix:  \"/websocket\",\r\n}\r\noptions.Wrapper(e)\r\n```\r\n[More...](https://github.com/webx-top/echo/blob/master/handler/sockjs/example/main.go)\r\n\r\n### Other Example\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"net/http\"\r\n\r\n\t\"github.com/webx-top/echo\"\r\n\t// \"github.com/webx-top/echo/engine/fasthttp\"\r\n\t\"github.com/webx-top/echo/engine/standard\"\r\n\tmw \"github.com/webx-top/echo/middleware\"\r\n)\r\n\r\nfunc main() {\r\n\te := echo.New()\r\n\te.Use(mw.Log())\r\n\r\n\te.Get(\"/\", func(c echo.Context) error {\r\n\t\treturn c.String(\"Hello, World!\")\r\n\t})\r\n\te.Get(\"/echo/:name\", func(c echo.Context) error {\r\n\t\treturn c.String(\"Echo \" + c.Param(\"name\"))\r\n\t})\r\n\t\r\n\te.Get(\"/std\", func(w http.ResponseWriter, r *http.Request) {\r\n\t\tw.Write([]byte(`standard net/http handleFunc`))\r\n\t\tw.WriteHeader(200)\r\n\t})\r\n\r\n\t// FastHTTP\r\n\t// e.Run(fasthttp.New(\":4444\"))\r\n\r\n\t// Standard\r\n\te.Run(standard.New(\":4444\"))\r\n}\r\n```\r\n\r\n[See other examples...](https://github.com/admpub/echo-example/blob/master/_v2/main.go)\r\n\r\n## Middleware list\r\nMiddleware  | Import path | Description\r\n:-----------|:------------|:-----------\r\n[BasicAuth](https://github.com/webx-top/echo/blob/master/middleware/auth.go)  | github.com/webx-top/echo/middleware |HTTP basic authentication\r\n[BodyLimit](https://github.com/webx-top/echo/blob/master/middleware/bodylimit.go)  | github.com/webx-top/echo/middleware |Limit request body\r\n[Gzip](https://github.com/webx-top/echo/blob/master/middleware/compress.go)  | github.com/webx-top/echo/middleware |Send gzip HTTP response\r\n[Secure](https://github.com/webx-top/echo/blob/master/middleware/secure.go)  | github.com/webx-top/echo/middleware |Protection against attacks\r\n[CORS](https://github.com/webx-top/echo/blob/master/middleware/cors.go)  | github.com/webx-top/echo/middleware |Cross-Origin Resource Sharing\r\n[CSRF](https://github.com/webx-top/echo/blob/master/middleware/csrf.go)  | github.com/webx-top/echo/middleware |Cross-Site Request Forgery\r\n[Log](https://github.com/webx-top/echo/blob/master/middleware/log.go)  | github.com/webx-top/echo/middleware |Log HTTP requests\r\n[MethodOverride](https://github.com/webx-top/echo/blob/master/middleware/methodOverride.go)  | github.com/webx-top/echo/middleware |Override request method\r\n[Recover](https://github.com/webx-top/echo/blob/master/middleware/recover.go)  | github.com/webx-top/echo/middleware |Recover from panics\r\n[HTTPSRedirect](https://github.com/webx-top/echo/blob/master/middleware/redirect.go)  | github.com/webx-top/echo/middleware |Redirect HTTP requests to HTTPS\r\n[HTTPSWWWRedirect](https://github.com/webx-top/echo/blob/master/middleware/redirect.go)  | github.com/webx-top/echo/middleware |Redirect HTTP requests to WWW HTTPS\r\n[WWWRedirect](https://github.com/webx-top/echo/blob/master/middleware/redirect.go)  | github.com/webx-top/echo/middleware |Redirect non WWW requests to WWW\r\n[NonWWWRedirect](https://github.com/webx-top/echo/blob/master/middleware/redirect.go)  | github.com/webx-top/echo/middleware |Redirect WWW requests to non WWW\r\n[AddTrailingSlash](https://github.com/webx-top/echo/blob/master/middleware/slash.go)  | github.com/webx-top/echo/middleware |Add trailing slash to the request URI\r\n[RemoveTrailingSlash](https://github.com/webx-top/echo/blob/master/middleware/slash.go)  | github.com/webx-top/echo/middleware |Remove trailing slash from the request URI\r\n[Static](https://github.com/webx-top/echo/blob/master/middleware/static.go)  | github.com/webx-top/echo/middleware |Serve static files\r\n[Session](https://github.com/webx-top/echo/blob/master/middleware/session/middleware.go)  | github.com/webx-top/echo/middleware/session | Sessions Manager\r\n[JWT](https://github.com/webx-top/echo/blob/master/middleware/jwt/jwt.go)  | github.com/webx-top/echo/middleware/jwt |JWT authentication\r\n[Hydra](https://github.com/webx-top/echo/blob/master/middleware/hydra/hydra.go)  | github.com/webx-top/echo/middleware/hydra | It uses [Hydra](https://github.com/ory-am/hydra)'s API to extract and validate auth token.\r\n[Markdown](https://github.com/webx-top/echo/blob/master/middleware/markdown/markdown.go)  | github.com/webx-top/echo/middleware/markdown |Markdown rendering\r\n[Render](https://github.com/webx-top/echo/blob/master/middleware/render/middleware.go)  | github.com/webx-top/echo/middleware/render |HTML template rendering\r\n[ReverseProxy](https://github.com/webx-top/reverseproxy/blob/master/middleware.go)  | github.com/webx-top/reverseproxy |Reverse proxy\r\n\r\n## Handler Wrapper list\r\nWrapper     | Import path | Description\r\n:-----------|:------------|:-----------\r\nWebsocket   |github.com/webx-top/echo/handler/websocket | [Example](https://github.com/webx-top/echo/blob/master/handler/websocket/example/main.go)\r\nSockjs      |github.com/webx-top/echo/handler/sockjs | [Example](https://github.com/webx-top/echo/blob/master/handler/sockjs/example/main.go)\r\nOauth2      |github.com/webx-top/echo/handler/oauth2 | [Example](https://github.com/webx-top/echo/blob/master/handler/oauth2/example/main.go)\r\n\r\n## Credits\r\n- [Vishal Rana](https://github.com/vishr) - Author\r\n- [Hank Shen](https://github.com/admpub) - Author\r\n- [Nitin Rana](https://github.com/nr17) - Consultant\r\n- [Contributors](https://github.com/webx-top/echo/graphs/contributors)\r\n\r\n## License\r\n\r\n[MIT](https://github.com/webx-top/echo/blob/master/LICENSE)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}